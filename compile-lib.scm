(include "compile.scm")

(defn emit-lib (exprs)
  (let ((preprocessed (map (fn (expr) (~> expr desugar alpha-convert closure-convert)); normalize-term))
                           exprs)))
    (for-each emit-global-var global-vars)
    (for-each emit-lambda lambdas)
    (for-each emit-toplevel-expr preprocessed))
)

(defn debug (expr)
      (inspect (~> expr))
      (let ((e2 (~> expr desugar)))
        (inspect e2)
        (let ((e3 (~> e2 alpha-convert)))
          (inspect e3)
          (let ((e4 (~> e3 closure-convert)))
            (inspect e4))))
      (set! lambdas '())
      (set! global-vars '()))

(def infile (fst (command-line-arguments)))
(def exprs (read-file infile))
(emit-lib exprs)
