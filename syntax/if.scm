(def (if? expr) (tagged-list? expr 'if))
(def if-test frst)
(def if-consequent frrst)
(def if-alternative frrrst)

(defn make-if (test con alt) (list 'if test con alt))

(defn emit-if (var env expr)
  (let ((true-label (unique-label "true"))
        (false-label (unique-label "false"))
        (end-label (unique-label "end"))
        (test-var (generate-var))
        (test-res-var (generate-var))
        (res-var (generate-var))
        (res-var1 (generate-var))
        (res-var2 (generate-var)))
    (emit-expr test-var env (if-test expr))
    (print (string-append* (list "  " test-res-var " = icmp eq i64 " test-var ", " (fixnum->string (immediate-rep #t)))))
    (emit-alloca res-var)
    (print (string-append* (list "  br i1 " test-res-var ", label %" true-label ", label %" false-label)))

    (emit-label true-label)
    (emit-expr res-var1 env (if-consequent expr))
    (emit-store res-var1 res-var)
    (emit-br1 end-label)

    (emit-label false-label)
    (emit-expr res-var2 env (if-alternative expr))
    (emit-store res-var2 res-var)
    (emit-br1 end-label)

    (emit-label end-label)
    (emit-load var res-var)))
