(defn cond? (expr)
  (tagged-list? expr 'cond))

(def cond-clauses rst)

(def cond-clause-test fst)
(defn cond-clause-action (clause)
     (make-sequence (rst clause)))

(defn cond->nested-ifs (expr)
  (defn helper (clauses)
       (cond
         ((null? clauses)
          (error "Empty cond: " expr))
         ((null? (rst clauses))
          (error "cond must have at least 2 branches: " expr))
         ((null? (rrst clauses))
          (let ((first-clause (fst clauses))
                (second-clause (frst clauses)))
            (if (eq? 'else (cond-clause-test second-clause))
              (make-if (cond-clause-test first-clause)
                       (cond-clause-action first-clause)
                       (cond-clause-action second-clause))
              (error "Last clause of cond must be else: " expr))))
         (else
          (let ((first-clause (fst clauses))
                (rest-clauses (rst clauses)))
            (make-if (cond-clause-test first-clause)
                     (cond-clause-action first-clause)
                     (helper rest-clauses))))))
  (helper (cond-clauses expr)))
