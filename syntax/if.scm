(def (if? expr) (tagged-list? expr 'if))
(def if-test frst)
(def if-consequent frrst)
(def if-alternative frrrst)

(defn make-if (test con alt) (list 'if test con alt))

(defn emit-if (var env expr)
  (let ((true-label (unique-label "true"))
        (false-label (unique-label "false"))
        (end-label (unique-label "end"))
        (test-var (generate-var))
        (test-res-var (generate-var))
        (res-var (generate-var))
        (res-var1 (generate-var))
        (res-var2 (generate-var)))
    (emit-expr test-var env (if-test expr))
    (print (format "  ~A = icmp eq i64 ~A, ~A" test-res-var test-var (immediate-rep #t)))
    (print (format "  ~A = alloca i64, align 8" res-var))
    (print (format "  br i1 ~A, label %~A, label %~A" test-res-var true-label false-label))

    (print (format "~A:" true-label))
    (emit-expr res-var1 env (if-consequent expr))
    (print (format "  store i64 ~A, i64* ~A, align 8" res-var1 res-var))
    (print (format "  br label %~A" end-label))

    (print (format "~A:" false-label))
    (emit-expr res-var2 env (if-alternative expr))
    (print (format "  store i64 ~A, i64* ~A, align 8" res-var2 res-var))
    (print (format "  br label %~A" end-label))

    (print (format "~A:" end-label))
    (print (format "  ~A = load i64, i64* ~A, align 8" var res-var))))
